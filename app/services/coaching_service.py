from datetime import datetime, timezone
from typing import List, Dict, Any, Optional
from app.external.openai_client import ask_gpt5
from app.external.line_client import push_line
from app.services.meal_service import meals_last_n_days
from app.database.firestore import get_latest_profile, user_doc
from app.database.bigquery import bq_upsert_profile, bq_insert_rows, bq_client
from app.config import settings

def build_daily_prompt(day: Dict[str, Any]) -> str:
    """Êó•Ê¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞Áî®„Éó„É≠„É≥„Éó„Éà„ÇíÁîüÊàê"""
    date = day.get("date", "")
    steps = day.get("steps_total", "0")
    sleep_line = day.get("sleep_line", "„Éá„Éº„Çø„Å™„Åó")
    calories = day.get("calories_total", "0")
    spo2_line = day.get("spo2_line", "„Éá„Éº„Çø„Å™„Åó")
    
    return f"""‰ªäÊó•„ÅØ {date}„ÄÇFitbit „ÅÆ‰ªäÊó•„ÅÆ„Éá„Éº„Çø„ÅØ:
- Ê≠©Êï∞: {steps}
- Áù°Áú†: {sleep_line}
- SpO‚ÇÇ: {spo2_line}
- Ê∂àË≤ª„Ç´„É≠„É™„Éº: {calories}

„ÅÇ„Å™„Åü„ÅØ„Éò„É´„Çπ„Ç±„Ç¢&„Ç®„ÇØ„Çµ„Çµ„Ç§„Ç∫„ÅÆ„Éó„É≠„Ç≥„Éº„ÉÅ„Åß„Åô„ÄÇ
500ÊñáÂ≠ó‰ª•ÂÜÖ„Åß‰ªäÊó•„ÅÆÁä∂ÊÖã„ÇíË¶ÅÁ¥Ñ„Åó„ÄÅÊòéÊó•„Å´Âêë„Åë„Å¶1„Äú3„Å§„ÅÆÂÖ∑‰ΩìÁöÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊó•Êú¨Ë™û„ÅßÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"""

def build_weekly_prompt(days: List[Dict[str, Any]], meals_by_day: Dict[str, List[Dict[str, Any]]], profile: Optional[Dict[str, Any]] = None) -> str:
    """ÈÄ±Ê¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞Áî®„Éó„É≠„É≥„Éó„Éà„ÇíÁîüÊàê"""
    # ÈÄ±Ê¨°Êú¨Êñá
    lines = []
    for d in days:
        day_key = d["date"]
        meals = meals_by_day.get(day_key, [])
        meal_snippets = []
        for m in meals[:2]:
            kcal_val = m.get("kcal")
            kcal_part = f"Ôºà~{int(kcal_val)}kcalÔºâ" if isinstance(kcal_val, (int, float)) else ""
            text = (m.get("text") or "").strip()
            if text:
                meal_snippets.append(f"„Éª{text}{kcal_part}")
        meal_block = "\n".join(meal_snippets) if meal_snippets else "ÔºàÈ£ü‰∫ãË®òÈå≤„Å™„ÅóÔºâ"

        lines.append(
            f"{d['date']}: Ê≠©Êï∞{d['steps_total']}, Áù°Áú†{d['sleep_line']}, "
            f"SpO‚ÇÇ{d['spo2_line']}, „Ç´„É≠„É™„Éº{d['calories_total']}\n"
            f"  È£ü‰∫ã:\n{meal_block}"
        )
    body = "\n".join(lines)

    # „Éó„É≠„Éï„Ç£„Éº„É´‰ªòÂ∏ØÊÉÖÂ†±
    prof_lines = []
    if profile:
        def add(label: str, key: str, transform=lambda x: x):
            v = profile.get(key)
            if v not in (None, "", []):
                prof_lines.append(f"- {label}: {transform(v)}")

        add("ÈÅãÂãïÁõÆÁöÑ", "goal")
        add("Âπ¥ÈΩ¢", "age")
        add("ÊÄßÂà•", "sex")
        add("Ë∫´Èï∑(cm)", "height_cm")
        add("Áèæ‰ΩìÈáç(kg)", "weight_kg")
        add("ÁõÆÊ®ô‰ΩìÈáç(kg)", "target_weight_kg")
        add("Âñ´ÁÖôÁä∂Ê≥Å", "smoking_status")
        add("È£≤ÈÖíÁøíÊÖ£", "alcohol_habit")

        if isinstance(profile.get("past_history"), list) and profile["past_history"]:
            mapping = {
                "hypertension": "È´òË°ÄÂúß", "diabetes": "Á≥ñÂ∞øÁóÖ", "cad": "ÂøÉÁñæÊÇ£",
                "stroke": "ËÑ≥Âçí‰∏≠", "dyslipidemia": "ËÑÇË≥™Áï∞Â∏∏Áóá",
                "kidney": "ËÖéÁñæÊÇ£", "liver": "ËÇùÁñæÊÇ£", "asthma": "ÂñòÊÅØ", "other": "„Åù„ÅÆ‰ªñ",
            }
            j = ", ".join(mapping.get(x, x) for x in profile["past_history"])
            prof_lines.append(f"- Êó¢ÂæÄÊ≠¥: {j}")

        add("ÊúçËñ¨", "medications")
        add("„Ç¢„É¨„É´„ÇÆ„Éº", "allergies")

    profile_block = "\n".join(prof_lines) if prof_lines else "Ôºà„Éó„É≠„Éï„Ç£„Éº„É´Êú™Ë®≠ÂÆöÔºâ"

    return f"""ÈÅéÂéª7Êó•Èñì„ÅÆ„Éò„É´„Çπ„Éá„Éº„Çø„Å®È£ü‰∫ãË®òÈå≤„Åß„Åô:
{body}

[„Éó„É≠„Éï„Ç£„Éº„É´ÊäúÁ≤ã]
{profile_block}

„ÅÇ„Å™„Åü„ÅØ„Éò„É´„Çπ„Ç±„Ç¢&Ê†ÑÈ§ä„ÅÆ„Éó„É≠„Ç≥„Éº„ÉÅ„Åß„Åô„ÄÇ
„Åô„Åπ„Å¶„ÅÆÂàÜÊûê„Å®ÊèêÊ°à„ÅØ„ÄÅ„Åì„Åì„Åæ„Åß„Å´Ë®òËºâ„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÔºàÂπ¥ÈΩ¢„ÄÅÊÄßÂà•„ÄÅË∫´Èï∑„ÄÅ‰ΩìÈáç„ÄÅÁõÆÊ®ô‰ΩìÈáç„ÄÅÈÅãÂãïÁõÆÁöÑ„ÄÅÂóúÂ•Ω„ÄÅÊó¢ÂæÄÊ≠¥„ÄÅÁîüÊ¥ªÁøíÊÖ£„ÄÅÈÅéÂéª7Êó•Èñì„ÅÆ„Éá„Éº„ÇøÔºâ„ÇíÂøÖ„ÅöÂèÇÁÖß„Åó„Å¶Ë°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
ËøîÁ≠î„ÅØ‰ª•‰∏ã„ÅÆÊßãÊàê„ÇíÂøÖÈ†à„Å®„Åó„Åæ„Åô„ÄÇ
1.ËâØ„Åã„Å£„ÅüÁÇπ
„ÄÄ - „É¶„Éº„Ç∂„Éº„ÅÆ„Éá„Éº„Çø„ÅÆ‰∏≠„ÅßÁâπ„Å´ËâØ„Åã„Å£„ÅüË°åÂãï„ÇÑÁµêÊûú„ÇíÊåô„Åí„ÄÅ„Åù„ÅÆÁêÜÁî±„ÇíÊï∞ÂÄ§„ÇÑÂ∞ÇÈñÄÁü•Ë≠ò„ÅßË™¨Êòé„Åô„Çã
2.Ë™≤È°åÁÇπ
„ÄÄ - ÊîπÂñÑ„Åô„Åπ„ÅçÂÖ∑‰ΩìÁöÑ„Å™Ë°åÂãï„ÇÑÁøíÊÖ£„ÇíÊåô„Åí„ÄÅ„Åù„ÅÆË™≤È°å„Åå‰Ωï„Å´„Çà„Å£„Å¶Âºï„ÅçËµ∑„Åì„Åï„Çå„Å¶„ÅÑ„Çã„ÅÆ„Åã„ÇíË™¨Êòé„Åô„Çã
3.ÂéüÂõ†ÂàÜÊûê
„ÄÄ - Ë™≤È°å„ÅåÁô∫Áîü„Åó„ÅüËÉåÊôØ„Çí„ÄÅÊ¥ªÂãïÈáè„ÉªÊ†ÑÈ§ä„ÉªÁù°Áú†„ÉªÁîüÊ¥ªÁøíÊÖ£„Å™„Å©„ÅÆË¶≥ÁÇπ„Åã„ÇâÂàÜÊûê„Åô„Çã
4.ÊîπÂñÑÊèêÊ°à
„ÄÄ - È£ü‰∫ãÔºöÊëÇÂèñ„Ç®„Éç„É´„ÇÆ„Éº(kcal)„Å®PFC„Éê„É©„É≥„Çπ„ÅÆÊï∞ÂÄ§„ÄÅÂÖ∑‰ΩìÁöÑÈ£üÊùê„ÉªÊñôÁêÜ‰æã„ÇíÊèêÁ§∫
„ÄÄ - ÈÅãÂãïÔºöÁ®ÆÁõÆÂêç„ÉªÂõûÊï∞„Éª„Çª„ÉÉ„ÉàÊï∞„ÉªÊôÇÈñì„ÉªË≤†Ëç∑„ÇíÊòéË®ò
„ÄÄ - Áù°Áú†„ÉªÁîüÊ¥ªÁøíÊÖ£ÔºöË°åÂãïÂÜÖÂÆπ„Å®ÊôÇÈñìÂ∏Ø„ÄÅÁí∞Â¢ÉÊù°‰ª∂„ÇíÊòéË®ò
„ÄÄ - ÂøÖ„Åö„Äå„Å™„Åú„Åù„Çå„ÅåÊúâÂäπ„Åã„Äç„ÇíÁîüÁêÜÂ≠¶„ÉªÊ†ÑÈ§äÂ≠¶„ÉªÈÅãÂãïÁîüÁêÜÂ≠¶ÁöÑÊ†πÊã†„Å®„Å®„ÇÇ„Å´Ë™¨Êòé„Åô„Çã
5.ÊòéÊó•„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éó„É©„É≥
„ÄÄ - È£ü‰∫ã„ÉªÈÅãÂãï„ÉªÁù°Áú†„ÅÆ„Åù„Çå„Åû„Çå„Å´„Å§„ÅÑ„Å¶„ÄÅÂÜçÁèæÊÄß„ÅåÈ´ò„Åè‰ªä„Åô„ÅêÂÆüË°å„Åß„Åç„ÇãÂÜÖÂÆπ„ÇíÊèêÊ°à„Åô„Çã
„Åô„Åπ„Å¶Êó•Êú¨Ë™û„Åß„ÄÅÂ∞ÇÈñÄÊÄß„ÉªÂÄãÂà•ÊÄß„ÉªÂÖ∑‰ΩìÊÄß„ÇíÈáçË¶ñ„Åó„Å¶‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"""

async def daily_coaching() -> Dict[str, Any]:
    """Êó•Ê¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞„ÇíÂÆüË°å"""
    try:
        # Âæ™Áí∞„Ç§„É≥„Éù„Éº„Éà„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß import
        from app.services.fitbit_service import fitbit_today_core, save_fitbit_daily_firestore
        
        # ‰ªäÊó•„ÅÆFitbit„Éá„Éº„ÇøÂèñÂæó
        day = await fitbit_today_core()
        
        # Firestore‰øùÂ≠ò
        saved = save_fitbit_daily_firestore("demo", day)
        
        # BigQuery‰øùÂ≠ò
        try:
            bq_insert_rows(settings.BQ_TABLE_FITBIT, [{
                "user_id": "demo",
                "date": saved["date"],
                "steps_total": saved["steps_total"],
                "sleep_line": saved["sleep_line"],
                "spo2_line": saved["spo2_line"],
                "calories_total": saved["calories_total"],
                "ingested_at": datetime.now(timezone.utc).isoformat(),
            }])
        except Exception as e:
            print(f"[WARN] BQ insert (daily_coaching) failed: {e}")
        
        # GPT„Åß„Ç≥„Éº„ÉÅ„É≥„Ç∞ÁîüÊàê
        prompt = build_daily_prompt(day)
        msg = await ask_gpt5(prompt)
        
        # LINEÈÄÅ‰ø°
        res = push_line(f"‚è∞ ÊØéÊó•„ÅÆ„Ç≥„Éº„ÉÅ„É≥„Ç∞\n{msg}")
        
        return {"ok": True, "sent": res, "preview": msg, "saved": saved}
    except Exception as e:
        push_line(f"‚ö†Ô∏è cron„Ç®„É©„Éº: {e}")
        return {"ok": False, "error": str(e)}

async def weekly_coaching(dry: bool = False, show_prompt: bool = False) -> Dict[str, Any]:
    """ÈÄ±Ê¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞„ÇíÂÆüË°å"""
    try:
        # Âæ™Áí∞„Ç§„É≥„Éù„Éº„Éà„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß import
        from app.services.fitbit_service import fitbit_last_n_days, save_fitbit_daily_firestore
        from app.database.bigquery import bq_upsert_fitbit_days
        
        # Áõ¥Ëøë7Êó• Fitbit
        days = await fitbit_last_n_days(7)
        
        # Firestore‰øùÂ≠ò
        saved = [save_fitbit_daily_firestore("demo", d) for d in days]
        
        # BigQuery‰øùÂ≠ò
        bq_fitbit = bq_upsert_fitbit_days("demo", days)
        bq_prof   = bq_upsert_profile("demo")
        
        # ÈÄ±Ê¨°„Éó„É≠„É≥„Éó„ÉàÊ∫ñÂÇô
        meals_map = await meals_last_n_days(7, "demo")
        profile   = get_latest_profile("demo")
        prompt    = build_weekly_prompt(days, meals_map, profile)
        
        print("\n=== WEEKLY PROMPT ===\n", prompt, "\n=== END PROMPT ===\n")
        
        # dry=1 „ÅÆÊôÇ„ÅØÁîüÊàêÔºÜLINEÈÄÅ‰ø°„Çí„Çπ„Ç≠„ÉÉ„Éó
        msg = "(dry run) no OpenAI call"
        send_res = {"sent": False, "reason": "dry"}
        if not dry:
            try:
                msg = await ask_gpt5(prompt)
            except Exception as e:
                print(f"[ERROR] OpenAI failed: {e}")
                msg = f"(OpenAI error) {e}"
            
            try:
                send_res = push_line(f"üóìÔ∏è ÈÄ±Ê¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞\n{msg}")
            except Exception as e:
                print(f"[WARN] LINE push failed: {e}")
                send_res = {"sent": False, "reason": repr(e)}
        
        resp = {
            "ok": True,
            "dry": dry,
            "saved_count": len(saved),
            "bq_fitbit": bq_fitbit,
            "bq_profile": bq_prof,
            "model": settings.OPENAI_MODEL,
            "sent": send_res,
            "preview": msg,
            "meals_keys": list(meals_map.keys()),
            "profile_used": bool(profile),
        }
        if show_prompt:
            resp["prompt"] = prompt
        
        return resp
        
    except Exception as e:
        print(f"[FATAL] weekly_coaching error: {e}")
        return {"ok": False, "where": "weekly_coaching", "error": str(e)}

async def monthly_coaching() -> Dict[str, Any]:
    """ÊúàÊ¨°„Ç≥„Éº„ÉÅ„É≥„Ç∞„ÇíÂÆüË°å"""
    if not bq_client:
        return {"ok": False, "error": "BigQuery not configured"}

    def q(sql: str):
        return list(bq_client.query(sql).result())

    fitbit_sql = f"""
    WITH d AS (
      SELECT DATE(date) AS d, steps_total, calories_total
      FROM `{settings.BQ_PROJECT_ID}.{settings.BQ_DATASET}.{settings.BQ_TABLE_FITBIT}`
      WHERE user_id='demo'
        AND date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 29 DAY) AND CURRENT_DATE()
    )
    SELECT COUNT(*) days, AVG(steps_total) avg_steps, MIN(steps_total) min_steps, MAX(steps_total) max_steps,
           AVG(calories_total) avg_cal, MIN(calories_total) min_cal, MAX(calories_total) max_cal
    FROM d
    """

    meals_sql = f"""
    SELECT when_date, text
    FROM `{settings.BQ_PROJECT_ID}.{settings.BQ_DATASET}.{settings.BQ_TABLE_MEALS}`
    WHERE user_id='demo'
      AND when_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 29 DAY) AND CURRENT_DATE()
    ORDER BY when_date DESC
    LIMIT 10
    """

    fb = q(fitbit_sql)[0]
    meals = q(meals_sql)

    meal_lines = "\n".join([f"- {r['when_date']}: {r['text']}" for r in meals])
    month_str = datetime.now(timezone.utc).astimezone().strftime("%Y-%m")
    prompt = f"""
„ÅÇ„Å™„Åü„ÅØ„Éò„É´„Çπ„Ç±„Ç¢ÔºÜÊ†ÑÈ§ä„ÅÆ„Éó„É≠„Ç≥„Éº„ÉÅ„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅØ{month_str}„ÅÆ30Êó•ÂàÜ„ÉÄ„Ç§„Ç∏„Çß„Çπ„Éà„Åß„Åô„ÄÇ

[Ê¥ªÂãï„ÉªÊ∂àË≤ª]
- ÊúüÈñìÊó•Êï∞: {int(fb['days'])}Êó•
- Ê≠©Êï∞: Âπ≥Âùá {int(fb['avg_steps'])}„ÄÅÊúÄÂ∞è {int(fb['min_steps'])}„ÄÅÊúÄÂ§ß {int(fb['max_steps'])}
- Ê∂àË≤ª„Ç´„É≠„É™„Éº: Âπ≥Âùá {int(fb['avg_cal'])}„ÄÅÊúÄÂ∞è {int(fb['min_cal'])}„ÄÅÊúÄÂ§ß {int(fb['max_cal'])}

[È£ü‰∫ãÔºà‰ª£Ë°®10‰ª∂Ôºâ]
{meal_lines}

„ÅäÈ°ò„ÅÑÔºö
1) „Åì„ÅÆ30Êó•„Çí„ÄåËâØ„Åã„Å£„ÅüÁÇπÔºèÊîπÂñÑÁÇπÔºèÊ≥®ÊÑè„Åô„Åπ„ÅçÂÖÜÂÄô„Äç„Å´ÂàÜ„Åë„Å¶Ë¶ÅÁ¥ÑÔºà300„Äú500Â≠óÔºâ
2) Êù•Êúà„ÅÆÂÖ∑‰Ωì„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊúÄÂ§ß5„Å§ÔºàÈ£ü‰∫ã„ÉªÈÅãÂãï„ÉªÁù°Áú†„ÅÆË¶≥ÁÇπ„ÅßÔºâ
3) ÂÆüË°å„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„ÉàÔºà5ÁÆáÊù°„ÄÅÁü≠„ÅèÔºâ
"""

    monthly_text = await ask_gpt5(prompt)

    # Firestore‰øùÂ≠ò
    user_doc("demo").collection("coach_monthly").document(month_str).set({
        "month": month_str,
        "text": monthly_text,
        "created_at": datetime.now(timezone.utc).isoformat(),
        "stats": {
            "avg_steps": int(fb['avg_steps']), "min_steps": int(fb['min_steps']), "max_steps": int(fb['max_steps']),
            "avg_cal": int(fb['avg_cal']), "min_cal": int(fb['min_cal']), "max_cal": int(fb['max_cal']),
        }
    }, merge=True)

    # BigQuery‰øùÂ≠ò
    try:
        bq_insert_rows(settings.BQ_TABLE_MONTHLY, [{
            "user_id": "demo",
            "month": month_str,
            "summary_text": monthly_text,
            "created_at": datetime.now(timezone.utc).isoformat(),
        }])
    except Exception:
        pass

    push_line(f"üìÖ {month_str} „ÅÆÊåØ„ÇäËøî„Çä„Åå„Åß„Åç„Åæ„Åó„ÅüÔºÅ")
    return {"ok": True, "month": month_str, "preview": monthly_text[:400]}
